import { BaseEntity } from 'typeorm';
import { RegisterDto } from '../form/register.dto';
import { UserPasswordEntity } from './user_password.entity';
import { LoginDto } from '../form/login.dto';
import { UpdateUserDto } from '../form/updateUser.dto';
import { UserResumeEntity } from './user_resume.entity';
import { MessageEntity } from '../../comment/entities/message.entity';
import { ReplayEntity } from '../../comment/entities/replace.entity';
import { ArticleEntity } from '../../article/entities/article.entity';
import { UserConcatEntity } from './user_concat.entity';
import { UserThemeEntity } from './user_theme.entity';
import { AlbumEntity } from '../../album/entities/album.entity';
export declare class UserEntity extends BaseEntity {
    user_id: number;
    nickname: string;
    phone: string;
    avatar: string;
    intro: string;
    domain: string;
    sex: number;
    rank: number;
    created_at: number;
    updated_at: number;
    last_login: number;
    token: string;
    deleted_at: number;
    password: UserPasswordEntity;
    concat: UserConcatEntity;
    resume: UserResumeEntity;
    theme: UserThemeEntity;
    messages: MessageEntity[];
    albums: AlbumEntity[];
    replays: ReplayEntity[];
    articles: ArticleEntity[];
    static encodePassword(password: string): string;
    static sign(userId: number, rank: number): string;
    static verify(token: string): string | object;
    static getUser(userId: number): Promise<UserEntity>;
    static getDomainList(): Promise<UserEntity[]>;
    static getBaseInfo(nickname?: string, userId?: number, domain?: string): Promise<UserEntity>;
    static hasRegisterNickname(nickname: string): Promise<number>;
    static hasRegisterPhone(phone: string): Promise<number>;
    static hasRegisterDomain(domain: string): Promise<number>;
    static register(registerDto: RegisterDto, userRank: number): Promise<UserEntity>;
    static login(loginDto: LoginDto): Promise<UserEntity>;
    static updateUser(updateUserDto: UpdateUserDto, userId: number): Promise<void>;
}
